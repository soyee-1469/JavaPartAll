개구리책 176p solid 5원칙 중심으루~
[객체지향 SW 설계의 원칙] 

① 개방-폐쇄 원칙 OCP
https://zdnet.co.kr/view/?no=00000039134727

 ② 사례연구, 단일 책임 원칙 SRP
https://zdnet.co.kr/view/?no=00000039135552

 ③ 인터페이스 분리의 원칙 ISP
https://zdnet.co.kr/view/?no=00000039139151

④ 리스코프 치환 원칙 LSP 
  의존역전원칙 DIP , DI의존관계주입
https://zdnet.co.kr/view/?no=00000039137043

1.IOC 통제권(제어) 역전
2.BEAN 오브젝트
3.IOC컨테이너
-BEAN FACTORY 빈관리
-APPLICATION CONTEXT 빅팩토리를상속 + 스프링서비스추가
4.싱글톤 
-여러차례호출되도 객체는 하나
-유연성떨어짐,
-객체 인스턴스를 공유하기 때문에 객체 상태를 유지(stateful)하게 설계하면 안됨

level > tinyint타입 , 큰숫자 필요없어서 작은단위 tinyint 사용으로 용량줄이기
ctrl + shift + t 테스트버전

어댑터패턴 : 생성자이름을 통일해서 만들고 여기저기 끼워서 사용 asa1.runService(); asb1.runService();

프록시패턴 : 인터페이스를 만들어 불러들여와 알맞게 변환해서 사용

데코레이션패턴 : 프록시와 동일하나 좀더 꾸며서 사용

싱글턴패턴 : 인스턴트 한개만 생성해서 주구장창 재사용, 항상걸어둬야하는거? new못하게 private

템플릿패턴 : 공통로직(오버라이딩필수) + 훅(오버라이딩선택)

